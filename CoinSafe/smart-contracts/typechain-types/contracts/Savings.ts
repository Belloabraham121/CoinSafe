/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Savings {
  export type ScheduledSavingStruct = {
    token: AddressLike;
    amount: BigNumberish;
    scheduledDate: BigNumberish;
  };

  export type ScheduledSavingStructOutput = [
    token: string,
    amount: bigint,
    scheduledDate: bigint
  ] & { token: string; amount: bigint; scheduledDate: bigint };

  export type TransactionStruct = {
    id: BigNumberish;
    user: AddressLike;
    token: AddressLike;
    typeOfTransaction: string;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type TransactionStructOutput = [
    id: bigint,
    user: string,
    token: string,
    typeOfTransaction: string,
    amount: bigint,
    timestamp: bigint
  ] & {
    id: bigint;
    user: string;
    token: string;
    typeOfTransaction: string;
    amount: bigint;
    timestamp: bigint;
  };

  export type SafeStruct = {
    typeOfSafe: string;
    id: BigNumberish;
    token: AddressLike;
    amount: BigNumberish;
    duration: BigNumberish;
    startTime: BigNumberish;
    unlockTime: BigNumberish;
  };

  export type SafeStructOutput = [
    typeOfSafe: string,
    id: bigint,
    token: string,
    amount: bigint,
    duration: bigint,
    startTime: bigint,
    unlockTime: bigint
  ] & {
    typeOfSafe: string;
    id: bigint;
    token: string;
    amount: bigint;
    duration: bigint;
    startTime: bigint;
    unlockTime: bigint;
  };
}

export interface SavingsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptedTokenCount"
      | "acceptedTokens"
      | "acceptedTokensAddresses"
      | "automatedSavingsPlans"
      | "claimAll"
      | "createAutomatedSavingsPlan"
      | "createSpendAndSavePlan"
      | "depositToPool"
      | "executeAutomatedSaving"
      | "getAvailableBalances"
      | "getContractBalance"
      | "getScheduledSavings"
      | "getTransactionHistory"
      | "getUserBalances"
      | "getUserSavings"
      | "isTokenAutoSaved"
      | "owner"
      | "save"
      | "spendAndSave"
      | "totalAmountSaved"
      | "userAutomatedPlanExists"
      | "userSpendAndSavePlan"
      | "userSpendAndSavePlanExists"
      | "userTransactions"
      | "withdrawFromPool"
      | "withdrawSavings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutomatedPlanCreated"
      | "AutomatedSavingExecuted"
      | "AutomatedSavingSet"
      | "DepositSuccessful"
      | "PlanCreated"
      | "SavedSuccessfully"
      | "SavingsWithdrawn"
      | "SpendAndSave"
      | "TokenAdded"
      | "TokenRemoved"
      | "TransactionHistoryUpdated"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptedTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedTokensAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedSavingsPlans",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claimAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAutomatedSavingsPlan",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpendAndSavePlan",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToPool",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAutomatedSaving",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledSavings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSavings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAutoSaved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "save",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendAndSave",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmountSaved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAutomatedPlanExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userSpendAndSavePlan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userSpendAndSavePlanExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTransactions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromPool",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSavings",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptedTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedTokensAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "automatedSavingsPlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAutomatedSavingsPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSpendAndSavePlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAutomatedSaving",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledSavings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSavings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAutoSaved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "save", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spendAndSave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountSaved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAutomatedPlanExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSpendAndSavePlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSpendAndSavePlanExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSavings",
    data: BytesLike
  ): Result;
}

export namespace AutomatedPlanCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    frequency: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    frequency: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    frequency: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomatedSavingExecutedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomatedSavingSetEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    frequency: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    frequency: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    frequency: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositSuccessfulEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    percentage: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    percentage: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    percentage: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SavedSuccessfullyEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SavingsWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish,
    earlyWithdrawal: boolean
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    fee: bigint,
    earlyWithdrawal: boolean
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    fee: bigint;
    earlyWithdrawal: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendAndSaveEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amountSaved: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amountSaved: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amountSaved: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [token: AddressLike, tokenType: BigNumberish];
  export type OutputTuple = [token: string, tokenType: bigint];
  export interface OutputObject {
    token: string;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedEvent {
  export type InputTuple = [token: AddressLike, tokenType: BigNumberish];
  export type OutputTuple = [token: string, tokenType: bigint];
  export interface OutputObject {
    token: string;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionHistoryUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    txCount: BigNumberish,
    txId: BigNumberish,
    token: AddressLike,
    typeOfTransaction: string,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    txCount: bigint,
    txId: bigint,
    token: string,
    typeOfTransaction: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    txCount: bigint;
    txId: bigint;
    token: string;
    typeOfTransaction: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    tokenType: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, tokenType: string, amount: bigint];
  export interface OutputObject {
    user: string;
    tokenType: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Savings extends BaseContract {
  connect(runner?: ContractRunner | null): Savings;
  waitForDeployment(): Promise<this>;

  interface: SavingsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptedTokenCount: TypedContractMethod<[], [bigint], "view">;

  acceptedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  acceptedTokensAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  automatedSavingsPlans: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        token: string;
        amount: bigint;
        frequency: bigint;
        duration: bigint;
        lastSavingTimestamp: bigint;
      }
    ],
    "view"
  >;

  claimAll: TypedContractMethod<[], [void], "nonpayable">;

  createAutomatedSavingsPlan: TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _frequency: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createSpendAndSavePlan: TypedContractMethod<
    [_token: AddressLike, _percentage: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositToPool: TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  executeAutomatedSaving: TypedContractMethod<
    [_user: AddressLike],
    [void],
    "nonpayable"
  >;

  getAvailableBalances: TypedContractMethod<
    [_user: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;

  getContractBalance: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "view"
  >;

  getScheduledSavings: TypedContractMethod<
    [],
    [Savings.ScheduledSavingStructOutput[]],
    "view"
  >;

  getTransactionHistory: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [Savings.TransactionStructOutput[]],
    "view"
  >;

  getUserBalances: TypedContractMethod<
    [_user: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;

  getUserSavings: TypedContractMethod<
    [_user: AddressLike],
    [Savings.SafeStructOutput[]],
    "view"
  >;

  isTokenAutoSaved: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  save: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  spendAndSave: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalAmountSaved: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  userAutomatedPlanExists: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  userSpendAndSavePlan: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        token: string;
        balance: bigint;
        percentage: bigint;
        duration: bigint;
      }
    ],
    "view"
  >;

  userSpendAndSavePlanExists: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  userTransactions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint] & {
        id: bigint;
        user: string;
        token: string;
        typeOfTransaction: string;
        amount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  withdrawFromPool: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawSavings: TypedContractMethod<
    [_savingsIndex: BigNumberish, _acceptEarlyWithdrawalFee: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptedTokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "acceptedTokensAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "automatedSavingsPlans"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        token: string;
        amount: bigint;
        frequency: bigint;
        duration: bigint;
        lastSavingTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAutomatedSavingsPlan"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _amount: BigNumberish,
      _frequency: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSpendAndSavePlan"
  ): TypedContractMethod<
    [_token: AddressLike, _percentage: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToPool"
  ): TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeAutomatedSaving"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAvailableBalances"
  ): TypedContractMethod<[_user: AddressLike], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScheduledSavings"
  ): TypedContractMethod<[], [Savings.ScheduledSavingStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionHistory"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [Savings.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBalances"
  ): TypedContractMethod<[_user: AddressLike], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getUserSavings"
  ): TypedContractMethod<
    [_user: AddressLike],
    [Savings.SafeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenAutoSaved"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "save"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendAndSave"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalAmountSaved"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userAutomatedPlanExists"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userSpendAndSavePlan"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        token: string;
        balance: bigint;
        percentage: bigint;
        duration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userSpendAndSavePlanExists"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userTransactions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint] & {
        id: bigint;
        user: string;
        token: string;
        typeOfTransaction: string;
        amount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFromPool"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSavings"
  ): TypedContractMethod<
    [_savingsIndex: BigNumberish, _acceptEarlyWithdrawalFee: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AutomatedPlanCreated"
  ): TypedContractEvent<
    AutomatedPlanCreatedEvent.InputTuple,
    AutomatedPlanCreatedEvent.OutputTuple,
    AutomatedPlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AutomatedSavingExecuted"
  ): TypedContractEvent<
    AutomatedSavingExecutedEvent.InputTuple,
    AutomatedSavingExecutedEvent.OutputTuple,
    AutomatedSavingExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AutomatedSavingSet"
  ): TypedContractEvent<
    AutomatedSavingSetEvent.InputTuple,
    AutomatedSavingSetEvent.OutputTuple,
    AutomatedSavingSetEvent.OutputObject
  >;
  getEvent(
    key: "DepositSuccessful"
  ): TypedContractEvent<
    DepositSuccessfulEvent.InputTuple,
    DepositSuccessfulEvent.OutputTuple,
    DepositSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "PlanCreated"
  ): TypedContractEvent<
    PlanCreatedEvent.InputTuple,
    PlanCreatedEvent.OutputTuple,
    PlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SavedSuccessfully"
  ): TypedContractEvent<
    SavedSuccessfullyEvent.InputTuple,
    SavedSuccessfullyEvent.OutputTuple,
    SavedSuccessfullyEvent.OutputObject
  >;
  getEvent(
    key: "SavingsWithdrawn"
  ): TypedContractEvent<
    SavingsWithdrawnEvent.InputTuple,
    SavingsWithdrawnEvent.OutputTuple,
    SavingsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "SpendAndSave"
  ): TypedContractEvent<
    SpendAndSaveEvent.InputTuple,
    SpendAndSaveEvent.OutputTuple,
    SpendAndSaveEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemoved"
  ): TypedContractEvent<
    TokenRemovedEvent.InputTuple,
    TokenRemovedEvent.OutputTuple,
    TokenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionHistoryUpdated"
  ): TypedContractEvent<
    TransactionHistoryUpdatedEvent.InputTuple,
    TransactionHistoryUpdatedEvent.OutputTuple,
    TransactionHistoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AutomatedPlanCreated(address,address,uint256,uint256)": TypedContractEvent<
      AutomatedPlanCreatedEvent.InputTuple,
      AutomatedPlanCreatedEvent.OutputTuple,
      AutomatedPlanCreatedEvent.OutputObject
    >;
    AutomatedPlanCreated: TypedContractEvent<
      AutomatedPlanCreatedEvent.InputTuple,
      AutomatedPlanCreatedEvent.OutputTuple,
      AutomatedPlanCreatedEvent.OutputObject
    >;

    "AutomatedSavingExecuted(address,address,uint256)": TypedContractEvent<
      AutomatedSavingExecutedEvent.InputTuple,
      AutomatedSavingExecutedEvent.OutputTuple,
      AutomatedSavingExecutedEvent.OutputObject
    >;
    AutomatedSavingExecuted: TypedContractEvent<
      AutomatedSavingExecutedEvent.InputTuple,
      AutomatedSavingExecutedEvent.OutputTuple,
      AutomatedSavingExecutedEvent.OutputObject
    >;

    "AutomatedSavingSet(address,address,uint256,uint256)": TypedContractEvent<
      AutomatedSavingSetEvent.InputTuple,
      AutomatedSavingSetEvent.OutputTuple,
      AutomatedSavingSetEvent.OutputObject
    >;
    AutomatedSavingSet: TypedContractEvent<
      AutomatedSavingSetEvent.InputTuple,
      AutomatedSavingSetEvent.OutputTuple,
      AutomatedSavingSetEvent.OutputObject
    >;

    "DepositSuccessful(address,address,uint256)": TypedContractEvent<
      DepositSuccessfulEvent.InputTuple,
      DepositSuccessfulEvent.OutputTuple,
      DepositSuccessfulEvent.OutputObject
    >;
    DepositSuccessful: TypedContractEvent<
      DepositSuccessfulEvent.InputTuple,
      DepositSuccessfulEvent.OutputTuple,
      DepositSuccessfulEvent.OutputObject
    >;

    "PlanCreated(address,address,uint8,uint256)": TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;
    PlanCreated: TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;

    "SavedSuccessfully(address,address,uint256,uint256)": TypedContractEvent<
      SavedSuccessfullyEvent.InputTuple,
      SavedSuccessfullyEvent.OutputTuple,
      SavedSuccessfullyEvent.OutputObject
    >;
    SavedSuccessfully: TypedContractEvent<
      SavedSuccessfullyEvent.InputTuple,
      SavedSuccessfullyEvent.OutputTuple,
      SavedSuccessfullyEvent.OutputObject
    >;

    "SavingsWithdrawn(address,uint256,uint256,bool)": TypedContractEvent<
      SavingsWithdrawnEvent.InputTuple,
      SavingsWithdrawnEvent.OutputTuple,
      SavingsWithdrawnEvent.OutputObject
    >;
    SavingsWithdrawn: TypedContractEvent<
      SavingsWithdrawnEvent.InputTuple,
      SavingsWithdrawnEvent.OutputTuple,
      SavingsWithdrawnEvent.OutputObject
    >;

    "SpendAndSave(address,address,uint256)": TypedContractEvent<
      SpendAndSaveEvent.InputTuple,
      SpendAndSaveEvent.OutputTuple,
      SpendAndSaveEvent.OutputObject
    >;
    SpendAndSave: TypedContractEvent<
      SpendAndSaveEvent.InputTuple,
      SpendAndSaveEvent.OutputTuple,
      SpendAndSaveEvent.OutputObject
    >;

    "TokenAdded(address,uint8)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;

    "TokenRemoved(address,uint8)": TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;
    TokenRemoved: TypedContractEvent<
      TokenRemovedEvent.InputTuple,
      TokenRemovedEvent.OutputTuple,
      TokenRemovedEvent.OutputObject
    >;

    "TransactionHistoryUpdated(address,uint256,uint256,address,string,uint256,uint256)": TypedContractEvent<
      TransactionHistoryUpdatedEvent.InputTuple,
      TransactionHistoryUpdatedEvent.OutputTuple,
      TransactionHistoryUpdatedEvent.OutputObject
    >;
    TransactionHistoryUpdated: TypedContractEvent<
      TransactionHistoryUpdatedEvent.InputTuple,
      TransactionHistoryUpdatedEvent.OutputTuple,
      TransactionHistoryUpdatedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
