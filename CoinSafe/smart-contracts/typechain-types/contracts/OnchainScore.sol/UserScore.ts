/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace UserScore {
  export type ScoreStruct = {
    baseNetworkScore: BigNumberish;
    platformScore: BigNumberish;
    totalScore: BigNumberish;
    lastUpdated: BigNumberish;
  };

  export type ScoreStructOutput = [
    baseNetworkScore: bigint,
    platformScore: bigint,
    totalScore: bigint,
    lastUpdated: bigint
  ] & {
    baseNetworkScore: bigint;
    platformScore: bigint;
    totalScore: bigint;
    lastUpdated: bigint;
  };
}

export interface UserScoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateBaseScore"
      | "calculatePlatformScore"
      | "getUserScore"
      | "scoreToken"
      | "tokenDecimals"
      | "updateScore"
      | "userScores"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ScoreUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateBaseScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlatformScore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scoreToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateScore",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userScores",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateBaseScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlatformScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scoreToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userScores", data: BytesLike): Result;
}

export namespace ScoreUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    baseScore: BigNumberish,
    platformScore: BigNumberish,
    totalScore: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    baseScore: bigint,
    platformScore: bigint,
    totalScore: bigint
  ];
  export interface OutputObject {
    user: string;
    baseScore: bigint;
    platformScore: bigint;
    totalScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserScore extends BaseContract {
  connect(runner?: ContractRunner | null): UserScore;
  waitForDeployment(): Promise<this>;

  interface: UserScoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateBaseScore: TypedContractMethod<
    [txCount: BigNumberish],
    [bigint],
    "view"
  >;

  calculatePlatformScore: TypedContractMethod<
    [savedAmount: BigNumberish, txCount: BigNumberish],
    [bigint],
    "view"
  >;

  getUserScore: TypedContractMethod<[], [UserScore.ScoreStructOutput], "view">;

  scoreToken: TypedContractMethod<[], [string], "view">;

  tokenDecimals: TypedContractMethod<[], [bigint], "view">;

  updateScore: TypedContractMethod<
    [
      user: AddressLike,
      baseTxCount: BigNumberish,
      savedAmount: BigNumberish,
      platformTxCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userScores: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        baseNetworkScore: bigint;
        platformScore: bigint;
        totalScore: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateBaseScore"
  ): TypedContractMethod<[txCount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePlatformScore"
  ): TypedContractMethod<
    [savedAmount: BigNumberish, txCount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserScore"
  ): TypedContractMethod<[], [UserScore.ScoreStructOutput], "view">;
  getFunction(
    nameOrSignature: "scoreToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateScore"
  ): TypedContractMethod<
    [
      user: AddressLike,
      baseTxCount: BigNumberish,
      savedAmount: BigNumberish,
      platformTxCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userScores"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        baseNetworkScore: bigint;
        platformScore: bigint;
        totalScore: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ScoreUpdated"
  ): TypedContractEvent<
    ScoreUpdatedEvent.InputTuple,
    ScoreUpdatedEvent.OutputTuple,
    ScoreUpdatedEvent.OutputObject
  >;

  filters: {
    "ScoreUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
    ScoreUpdated: TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
  };
}
